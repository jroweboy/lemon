# shallow clone
clone_depth: 10

skip_tags: true

deploy:
  release: bleeding-edge-$(appveyor_build_number)
  description: |
    Build number $(appveyor_build_number)

    If you are unsure what to download, [download and run the latest CitraSetup.exe](https://github.com/citra-emu/citra-bleeding-edge/releases/download/bleeding-edge-$(appveyor_build_number)/CitraSetup.exe)
  provider: GitHub
  auth_token:
    secure: 5iwe1T0xdmGxtJi8YIOfdUZvKNoriR5cqhfXN8QQ4J5Uj9syL6GeUNjgATkMzfCq
  artifact: RELEASES,FullPkg,DeltaPkg,Installer
  draft: false
  # github tags api doesn't return prelease tags >.<
  prerelease: false

environment:
  matrix:
    - BUILD_TYPE: mingw
    #- BUILD_TYPE: msvc
  BUILD_PASSWORD:
    secure: EXGNlWKJsCtbeImEJ5EP9qrxZ+EqUFfNy+CP61nDOMA=

cache:
  - C:\ProgramData\chocolatey\bin -> appveyor.yml
  - C:\ProgramData\chocolatey\lib -> appveyor.yml

os: Visual Studio 2015

platform:
  - x64

configuration:
  - Release

install:
  - git submodule update --init --recursive
  - ps: |
        if ($env:BUILD_TYPE -eq 'mingw') {
          # redirect err to null to prevent warnings from becoming errors
          # workaround for cyclical dependancies
          #C:\msys64\usr\bin\bash -lc "pacman --noconfirm -Syu" 2> $null
          C:\msys64\usr\bin\bash -lc "pacman --noconfirm -S mingw64/mingw-w64-x86_64-freetype mingw64/mingw-w64-x86_64-fontconfig" 2> $null
          C:\msys64\usr\bin\bash -lc "pacman --noconfirm -S mingw64/mingw-w64-x86_64-cmake mingw64/mingw-w64-x86_64-qt5 mingw64/mingw-w64-x86_64-SDL2" 2> $null
        }

before_build:
  - mkdir %BUILD_TYPE%build
  - cd %BUILD_TYPE%build
  - ps: |
        if ($env:BUILD_TYPE -eq 'msvc') {
          cmake -G "Visual Studio 14 2015 Win64" -DCITRA_USE_BUNDLED_QT=1 -DCITRA_USE_BUNDLED_SDL2=1 -DWIN_CREATE_INSTALLER=1 ..
        } else {
          $old_path = $env:Path
          # Change path to just include the mingw gcc and *not* sh.exe (which breaks things when using MinGW Makefiles)
          $env:Path = "C:\msys64\mingw64\bin\;"
          # make sure error output from this command isn't interpreted as an error in powershell
          C:\Windows\System32\cmd /c 'C:\msys64\mingw64\bin\cmake -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release -DQt5_DIR=C:/msys64/mingw64/qt5/lib/cmake/Qt5/ -DSDL2_INCLUDE_DIR=C:/msys64/mingw64/include/SDL2/ -DSDL2_LIBRARY=C:/msys64/mingw64/bin/SDL2.dll -DWIN_CREATE_INSTALLER=1 .. 2>&1'
          $env:Path = $old_path
        }
  - cd ..

build_script:
  - ps: |
        if ($env:BUILD_TYPE -eq 'msvc') {
          # https://www.appveyor.com/docs/build-phase
          msbuild msvcbuild/citra.sln /maxcpucount /logger:"C:\Program Files\AppVeyor\BuildAgent\Appveyor.MSBuildLogger.dll"
        } else {
          $env:Path = "C:\msys64\mingw64\bin\;" + $env:Path
          C:\Windows\System32\cmd /c "C:\msys64\mingw64\bin\mingw32-make -C mingwbuild/ -j${env:NUMBER_OF_PROCESSORS} 2>&1"
        }

test_script:
  - cd %BUILD_TYPE%build && ctest -VV -C Release && cd ..

after_build:
  - ps: |
        if ($env:BUILD_TYPE -eq 'mingw') {
          # Build the installer
          $APPVEYOR_BUILD_NUMBER = "$env:APPVEYOR_BUILD_NUMBER"
          $CMAKE_SOURCE_DIR = "$env:APPVEYOR_BUILD_FOLDER"
          $CMAKE_BINARY_DIR = "$CMAKE_SOURCE_DIR/mingwbuild"
          $SQUIRREL_DIR = "$CMAKE_BINARY_DIR/squirrel.win"
          $SQUIRREL_RELEASE_DIR = "$SQUIRREL_DIR/Release"
          $SQUIRREL_BUILD_DIR = "$SQUIRREL_DIR/Build"
          $SQUIRREL_BIN_DIR = "$SQUIRREL_BUILD_DIR/lib/net45"
          $MSVC_RUNTIME_INSTALLER = "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/redist/1033/vcredist_x64.exe"

          # download nuget cmdline if it doesn't exist
          if (!(Test-Path -Path "$CMAKE_BINARY_DIR/nuget")) {
              New-Item -ItemType Directory -Force -Path "$CMAKE_BINARY_DIR/nuget" | Out-Null
              (New-Object Net.WebClient).DownloadFile("https://dist.nuget.org/win-x86-commandline/v3.4.4/NuGet.exe",
                  "$CMAKE_BINARY_DIR/nuget/nuget.exe")
          }
          # download squirrel if it doesn't exist
          if (!(Test-Path -Path "$CMAKE_BINARY_DIR/squirrel")) {
              New-Item -ItemType Directory -Force -Path "$CMAKE_BINARY_DIR/squirrel" | Out-Null
              (New-Object Net.WebClient).DownloadFile("https://github.com/Squirrel/Squirrel.Windows/releases/download/1.4.4/Squirrel.Windows-1.4.4.zip",
                  "$CMAKE_BINARY_DIR/squirrel/squirrel.zip")
              7z e "$CMAKE_BINARY_DIR/squirrel/squirrel.zip" -o"$CMAKE_BINARY_DIR/squirrel" -r -y | Out-Null
          }

          # make the path we'll copy the output to post build
          New-Item -ItemType Directory -Force -Path $SQUIRREL_BIN_DIR | Out-Null
          New-Item -ItemType Directory -Force -Path $SQUIRREL_BUILD_DIR | Out-Null
          New-Item -ItemType Directory -Force -Path $SQUIRREL_RELEASE_DIR | Out-Null

          # Download the previous release information to generate a delta build
          $LATEST_RELEASE_URL = "https://api.github.com/repos/citra-emu/citra-bleeding-edge/releases/latest"
          $LATEST_RELEASE_JSON = Invoke-WebRequest $LATEST_RELEASE_URL -Headers @{"Accept"="application/json"}
          $LATEST_RELEASE_JSON.Content -match '.*"tag_name":\s*"([^"]*)".*' | Out-Null
          $LATEST_RELEASE_TAG = $Matches[1]
          $RELEASE_URL = "https://github.com/citra-emu/citra-bleeding-edge/releases/download/$LATEST_RELEASE_TAG"
          $PREVIOUS_RELEASE_NUMBER = ($LATEST_RELEASE_TAG -split "-")[-1]
          (New-Object Net.WebClient).DownloadFile("$RELEASE_URL/RELEASES", "$SQUIRREL_RELEASE_DIR/RELEASES")
          (New-Object Net.WebClient).DownloadFile("$RELEASE_URL/citra.edge-0.1.$PREVIOUS_RELEASE_NUMBER-full.nupkg", "$SQUIRREL_RELEASE_DIR/citra.edge-0.1.$PREVIOUS_RELEASE_NUMBER-full.nupkg")

          # Copy the files to the folder for nuget to package
          # First copy the citra exe files and all the dlls to the new release folder
          Get-ChildItem "$CMAKE_BINARY_DIR" -Recurse -Filter "citra*.exe" | Copy-Item -destination $SQUIRREL_BIN_DIR
          Get-ChildItem "$CMAKE_BINARY_DIR" -Recurse -Filter "updater.exe" | Copy-Item -destination $SQUIRREL_BIN_DIR
          $MingwDLLs = "Qt5Core.dll","Qt5Widgets.dll","Qt5Gui.dll","Qt5OpenGL.dll","libbz2-1.dll","libicudt56.dll","libicuin56.dll","libicuuc56.dll","libffi-6.dll","libfreetype-6.dll","libgcc_s_seh-1.dll","libglib-2.0-0.dll","libgobject-2.0-0.dll","libgraphite2.dll","libiconv-2.dll","libharfbuzz-0.dll","libintl-8.dll","libpcre-1.dll","libpcre16-0.dll","libpng16-16.dll","libstdc++-6.dll","libwinpthread-1.dll","SDL2.dll","zlib1.dll"
          foreach ($file in $MingwDLLs) {
            Copy-Item -path "C:/msys64/mingw64/bin/$file" -force -destination "$SQUIRREL_BIN_DIR"
          }
          New-Item -ItemType Directory -Force -Path "$SQUIRREL_BIN_DIR/platforms" | Out-Null
          Copy-Item -path "C:/msys64/mingw64/share/qt5/plugins/platforms/qwindows.dll" -force -destination "$SQUIRREL_BIN_DIR/platforms"

          # build the nuget file
          $arguments = "pack", "$CMAKE_BINARY_DIR/citra.nuspec", "-BasePath", "$SQUIRREL_BUILD_DIR", "-OutputDirectory", "$SQUIRREL_BUILD_DIR"
          Start-Process -FilePath "$CMAKE_BINARY_DIR/nuget/nuget.exe" -Wait -NoNewWindow -ArgumentList $arguments
          echo "Building squirrel"
          $arguments = "--releasify=$SQUIRREL_BUILD_DIR/citra.edge.0.1.$APPVEYOR_BUILD_NUMBER.nupkg", "--releaseDir=$SQUIRREL_RELEASE_DIR", "--icon=$CMAKE_SOURCE_DIR/dist/citra.ico"
          Start-Process -FilePath $CMAKE_BINARY_DIR/squirrel/squirrel.exe -Wait -NoNewWindow -ArgumentList $arguments

          # copy the files to the root dir so it'll be easier to make them artifacts
          Copy-Item -path "$SQUIRREL_RELEASE_DIR/citra*.nupkg" -recurse -force -destination $CMAKE_SOURCE_DIR
          Copy-Item -path "$SQUIRREL_RELEASE_DIR/RELEASES" -recurse -force -destination $CMAKE_SOURCE_DIR
          Copy-Item -path "$SQUIRREL_RELEASE_DIR/Setup.exe" -recurse -force -destination $CMAKE_SOURCE_DIR
          Rename-Item -path "$CMAKE_SOURCE_DIR/Setup.exe" CitraSetup.exe
        }

artifacts:
  - path: citra.edge-0.1.$(APPVEYOR_BUILD_NUMBER)-full.nupkg
    name: FullPkg
  - path: citra.edge-0.1.$(APPVEYOR_BUILD_NUMBER)-delta.nupkg
    name: DeltaPkg
  - path: CitraSetup.exe
    name: Installer
  - path: RELEASES
    name: RELEASES

on_success:
    # copying the needed QT Dlls is now done post build. See the CMakeLists.txt file in the citra-qt folder
  - ps: >
        if (!"$env:APPVEYOR_PULL_REQUEST_TITLE" -and ("$env:APPVEYOR_REPO_BRANCH" -eq "master")) {
            $GITDATE = $(git show -s --date=short --format='%ad') -replace "-",""
            $GITREV = $(git show -s --format='%h')

            $GITDATE = $(git show -s --date=short --format='%ad') -replace "-",""
            $GITREV = $(git show -s --format='%h')
            # Where are these spaces coming from? Regardless, let's remove them
            $BUILD_NAME = "citra-${GITDATE}-${GITREV}-windows-amd64.7z" -replace " ",""
            $BUILD_NAME_PDB = "citra-${GITDATE}-${GITREV}-windows-amd64-debugsymbols.7z" -replace " ",""
            $BUILD_NAME_NOQT = "citra-noqt-${GITDATE}-${GITREV}-windows-amd64.7z" -replace " ",""

            # Remove unnecessary files
            rm .\build\bin\release\*tests*

            # Put the pdb files in a separate archive and remove them from the main download
            7z a $BUILD_NAME_PDB .\build\bin\release\*.pdb
            rm .\build\bin\release\*.pdb

            # Zip up the build folder and documentation
            7z a $BUILD_NAME .\build\bin\release\* .\license.txt .\README.md
            # Do a second archive with only the binaries (excludes dlls) and documentation
            7z a $BUILD_NAME_NOQT .\build\bin\release\*.exe .\license.txt .\README.md

            # Download WinSCP and upload to server
            choco install winscp.portable
            WinSCP.exe /command `
                "option batch abort" `
                "option confirm off" `
                "open sftp://citra-builds:${env:BUILD_PASSWORD}@builds.citra-emu.org -hostkey=*" `
                "put $BUILD_NAME /citra/nightly/windows-amd64/" `
                "put $BUILD_NAME_NOQT /citra/nightly/windows-noqt-amd64/" `
                "put $BUILD_NAME_PDB /citra/nightly/windows-amd64-debugsymbols/" `
                "exit"
        }
